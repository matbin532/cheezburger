openapi: '3.0.3'
info:
  title: Cheez API
  description: API for Cheezburger forum
  contact:
    email: matbin@ktu.lt
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: '1.0'
servers:
  - url: https://cheezapi20241207133934.azurewebsites.net/api/v1
tags:
  - name: User
    description: Related to user management
  - name: Topic
    description: Related to topic management
  - name: Thread
    description: Related to forum thread management
  - name: Post
    description: Related to forum post management
paths:
  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Returns the list of ALL the users on the forum.
      operationId: GetUsers
      responses:
        '200':
          description: A JSON array of user data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
              example:
                userID: 1
                username: "user1"
                isAdmin: false
                PFP_URL: "https://example.com/pfp.jpg"
                createdAt: "2024-12-01T12:00:00Z"
    post:
      tags:
        - User
      summary: Create a new user
      description: Creates a new user on the forum.
      operationId: CreateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
              example:
                - username: "user1"
                - email: "example@example.com"
                - password: "password123"
      responses:
        '201':
          description: JSON object of the created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateDto'
              example:
              - userID: 1
              - username: "user1"
              - createdAt: "2024-12-01T12:00:00Z"
              - PFP_URL: "https://example.com/pfp.jpg"
        '400':
          description: Bad request (invalid input data)
        '422':
          description: Unprocessable entity (password/username is too short or too long)
        '409':
          description: Conflict (user with the same username or email already exists)'
  /users/login:
    post:
      tags:
        - User
      summary: Login
      description: Logs in a user.
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
            example:
              - username: "user1"
              - password: "password123"
      responses:
        '200':
          description: the access and refresh tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
              example:
                - refresh_token: "token_here"
                - access_token: "token_here"                    
        '400':
          description: Bad request (invalid input data)
        '401':
          description: Unauthorized (invalid username or password)

  /users/refresh:
    post:
      tags:
        - User
      summary: Refresh token
      description: Refreshes the access token.
      operationId: RefreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: the access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
              example:
                - access_token: "token_here"                    
        '400':
          description: Bad request (invalid input data)
        '401':
          description: Unauthorized (invalid refresh token)
      security:
        - bearerAuth: []

  /users/logout:
    post:
      tags:
        - User
      summary: Logout
      description: Logs out a user.
      operationId: Logout
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized (user is not signed in)
  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Returns the profile of the signed in user.
      operationId: GetProfile
      responses:
        '200':
          description: JSON object of the user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
              example:
                - UserID: 1
                - Username: "user1"
                - Email: "example@example.com"
                - IsAdmin: false
                - CreatedAt: "2024-12-01T12:00:00Z"
                - PFP_URL: "https://example.com/pfp.png"
        '401':
          description: Unauthorized (user is not signed in)
      security:
        - bearerAuth: []

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Returns a single user by ID.
      operationId: GetUser
      responses: 
        '200':
          description: JSON object of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                - userID: 1
                - username: "user1"
                - isAdmin: false
                - PFP_URL: "https://example.com/pfp.jpg"
                - createdAt: "2024-12-01T12:00:00Z"
        '404':
          description: Not found
    put:
      tags:
        - User
      summary: Update user
      description: Updates a user with the given ID.
      operationId: UpdateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
            example:
              - username: "user1_2"
              - email: "example@example.com"
              - password: "password234"
              - isAdmin: true
              - PFP_URL: "https://example.com/pfp2.png"
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not an admin and tries to update another user)
        '404':
          description: Not found (user with the given ID does not exist)
        '409':
          description: Conflict (user with the same username or email already exists)
        '422':
          description: Unprocessable entity (email and/or profile picture URL are invalid)
      security:
        - bearerAuth: []
    delete:
      tags:
        - User
      summary: Delete user
      description: Deletes a user with the given ID.
      operationId: DeleteUser
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not an admin and tries to delete another user)
        '404':
          description: Not found
      security:
        - bearerAuth: []
  /topics:
    get:
      tags:
        - Topic
      summary: Get all topics
      description: Returns the list of ALL the topics on the forum.
      operationId: GetTopics
      responses:
        '200':
          description: A JSON array of topic names, descriptions and creation dates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicDto'
              example:
                - topicID: 1
                - title: "topic1"
                - description: "description here"
                - createdAt: "2024-12-01T12:00:00Z"
                - CreatorId: 1
    post:
      tags: 
        - Topic
      summary: Create a new topic
      description: Creates a new topic on the forum.
      operationId: PostTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateDto'
            example:
              - title: "topic1"
              - description: "description here"
      responses:
        '201':
          description: JSON object of the created topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicCreateDto'
              example:
                - title: "topic1"
                - description: "description here"
                - creatorId: 1
        '400':
          description: Bad request (invalid or empty input data)
        '401':
          description: Unauthorized (user is not signed in)
        '409':
          description: Conflict (topic with the same title already exists)
      security:
        - bearerAuth: []
  /topics/{topicID}:
    get:
      tags:
        - Topic
      summary: Get topic by ID
      description: Returns a single topic by ID.
      operationId: GetTopic
      responses:
        '200':
          description: JSON object of the topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDto'
              example:
                - topicID: 1
                - title: "topic1"
                - description: "description here"
                - createdAt: "2024-12-01T12:00:00Z"
                - CreatorId: 1
        '404':
          description: Not found
    put:
      tags:
        - Topic
      summary: Update topic
      description: Updates a topic with the given ID.
      operationId: UpdateTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicUpdateDto'
            example: 
              - title: "topic1"
              - description: "description here"
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the topic and not an admin)
        '404':
          description: Not found (topic with the given ID does not exist)
        '409':
          description: Conflict (topic with the same title already exists)
      security:
        - bearerAuth: []
    delete:
      tags:
        - Topic
      summary: Delete topic
      description: Deletes a topic with the given ID.
      operationId: DeleteTopic
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the topic and not an admin)
        '404':
          description: Not found
      security:
        - bearerAuth: []
  /topics/{topicID}/threads:
    get:
      tags:
        - Thread
      summary: Get all threads in a topic
      description: Returns the list of ALL the threads in a topic.
      operationId: GetThreads
      responses:
        '200':
          description: A JSON array of thread titles, creation dates and locked status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThreadDto'
              example:
                - threadID: 1
                - title: "thread1"
                - isLocked: false
                - createdAt: "2024-12-01T12:00:00Z"
                - creatorId: 1
        '404':
          description: Not found (topic with the given ID does not exist)
    post:
      tags:
        - Thread
      summary: Create a new thread in a topic
      description: Creates a new thread in a topic.
      operationId: PostThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadCreateDto'
            example:
              - title: "thread1"
      responses:
        '201':
          description: JSON object of the created thread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadCreateDto'
              example:
                - title: "thread1"
                - creatorId: 1
        '400':
          description: Bad request (invalid or empty input data)
        '404':
          description: Not found (topic with the given ID does not exist)
        '409':
          description: Conflict (thread with the same title already exists)
      security:
        - bearerAuth: []
  /topics/{topicID}/threads/{threadID}:
    get:
      tags:
        - Thread
      summary: Get thread by ID
      description: Returns a single thread by ID.
      operationId: GetThread
      responses:
        '200':
          description: JSON object of the thread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadDto'
              example:
                - threadID: 1
                - title: "thread1"
                - createdAt: "2024-12-01T12:00:00Z"
                - isLocked: false
                - creatorId: 1
        '404':
          description: Not found
    put:
      tags:
        - Thread
      summary: Update thread
      description: Updates a thread with the given ID.
      operationId: UpdateThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreadUpdateDto'
            example:
              - title: "thread1"
              - isLocked: true
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the thread and not an admin)
        '404':
          description: Not found (topic or thread with the given ID does not exist)
        '409':
          description: Conflict (thread with the same title already exists)
      security:
        - bearerAuth: []
    delete:
      tags:
        - Thread
      summary: Delete thread
      description: Deletes a thread with the given ID.
      operationId: DeleteThread
      responses:
        '204':
          description: No content
        '401': 
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the thread and not an admin)
        '404':
          description: Not found
      security:
        - bearerAuth: []
  /topics/{topicID}/threads/{threadID}/posts:
    get:
      tags:
        - Post
      summary: Get all posts in a thread
      description: Returns the list of ALL the posts in a thread.
      operationId: GetPosts
      responses:
        '200':
          description: A JSON array of post contents, creation dates and user IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostGetDto'
              example:
                - postID: 1
                - creatorId: 1
                - content: "content here"
                - createdAt: "2024-12-01T12:00:00Z"
        '404':
          description: Not found (topic or thread with the given ID does not exist)
    post:
      tags:
        - Post
      summary: Create a new post in a thread
      description: Creates a new post in a thread.
      operationId: CreatePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateDto'
            example:
              - content: "content here"
      responses:
        '201':
          description: JSON object of the created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreateDto'
              example:
                - creatorId: 1
                - content: "content here"
                - createdAt: "2024-12-01T12:00:00Z"
        '400':
          description: Bad request (invalid or empty input data)
        '401':
          description: Unauthorized (user is not signed in)
        '404':
          description: Not found (topic or thread with the given ID does not exist)
      security: 
        - bearerAuth: []
  /topics/{topicID}/threads/{threadID}/posts/{postID}:
    get:
      tags:
        - Post
      summary: Get post by ID
      description: Returns a single post by ID.
      operationId: GetPost
      responses:
        '200':
          description: JSON object of the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGetDto'
              example:
                - postID: 1
                - creatorId: 1
                - content: "content here"
                - createdAt: "2024-12-01T12:00:00Z"
        '404':
          description: Not found (topic, thread or post with the given ID does not exist)
    put:
      tags:
        - Post
      summary: Update post
      description: Updates a post with the given ID.
      operationId: UpdatePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateDto'
            example:
              - content: "content here"
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the post and not an admin)
        '404':
          description: Not found (topic, thread or post with the given ID does not exist)
      security:
        - bearerAuth: []
    delete:
      tags:
        - Post
      summary: Delete post
      description: Deletes a post with the given ID.
      operationId: DeletePost
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized (user is not signed in)
        '403':
          description: Forbidden (user is not the creator of the post and not an admin)
        '404':
          description: Not found (topic, thread or post with the given ID does not exist)
      security:
        - bearerAuth: []
components:
  schemas:
    LoginDto:
      type: object
      properties:
        username:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
      required:
        - username
        - password
    Profile:
      type: object
      properties:
        UserID:
          type: integer
          format: int32
        Username:
          type: string
          nullable: false
        Email:
          type: string
          format: email
          nullable: false
        IsAdmin:
          type: boolean
          nullable: false
        CreatedAt:
          type: string
          format: date-time
        PFP_URL:
          type: string
          nullable: false
      required:
        - UserID
        - Username
        - Email
        - IsAdmin
        - CreatedAt
        - PFP_URL
    UserCreateDto:
      type: object
      properties:
        username:
          type: string
          nullable: false
        email:
          type: string
          format: email
          nullable: false
        password:
          type: string
          minLength: 8
          maxLength: 64
          nullable: false
      required:
        - username
        - email
        - password
    UserDto: 
      type: object
      properties:
        userID:
          type: integer
          format: int32
        username:
          type: string
          nullable: false
        isAdmin:
          type: boolean
          nullable: false
        createdAt:
          type: string
          format: date-time
        PFP_URL:
          type: string
          nullable: false
      required:
        - userID
        - username
        - isAdmin
        - createdAt
        - PFP_URL
    UserUpdateDto:
      type: object
      properties:
        username:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        isBanned:
          type: boolean
          nullable: true
        isAdmin:
          type: boolean
          nullable: true
        password:
          type: string
          minLength: 8
          maxLength: 64
          nullable: true
    TopicCreateDto:
      type: object
      properties:
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        creatorId:
          type: integer
          format: int32
      required:
        - title
        - creatorId
    TopicDto:
      type: object
      properties:
        topicID:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        creatorId:
          type: integer
          format: int32
      required:
        - title
        - creatorId
    TopicUpdateDto:
      type: object
      properties:
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        isHidden:
          type: boolean
          nullable: true
        CreatorId:
          type: integer
          format: int32
    ThreadCreateDto:
      type: object
      properties:
        title:
          type: string
          nullable: true
        creatorId: 
          type: integer
          format: int32
        verifiedOnly:
          type: boolean
          nullable: true
      required:
        - title
        - creatorId
    ThreadDto:
      type: object
      properties:
        threadID:
          type: integer
          format: int32
        title:
          type: string
          nullable: false
        createdAt:
          type: string
          format: date-time
        isLocked:
          type: boolean
          nullable: false
        verifiedOnly:
          type: boolean
          nullable: true
    ThreadUpdateDto:
      type: object
      properties:
        title:
          type: string
          nullable: true
        isLocked:
          type: boolean
          nullable: true
        creatorId:
          type: integer
          format: int32
        verifiedOnly:
          type: boolean
          nullable: true
      required:
        - creatorId
    PostCreateDto:
      type: object
      properties:
        creatorId:
          type: integer
          format: int32
        content:
          type: string
          nullable: false
        createdAt:
          type: string
          format: date-time
      required:
        - creatorId
        - content
    PostGetDto:
      type: object
      properties:
        postID:
          type: integer
          format: int32
        creatorId:
          type: integer
          format: int32
        content:
          type: string
          nullable: false
        createdAt:
          type: string
          format: date-time
    PostUpdateDto:
      type: object
      properties:
        content:
          type: string
          nullable: true










          


                  

